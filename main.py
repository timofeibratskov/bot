import asyncio
import nest_asyncio

import openai
import base64
import requests
import os
from orm import create_table, insert_data, get_user, update_value, select_values
from keyboard import kb
from aiogram import Bot, Dispatcher, executor, types
from config import OPENAI_TOKEN, BOT_TOKEN
from gtts import gTTS

# Initialize OpenAI client
openai_client = openai.AsyncOpenAI(api_key=OPENAI_TOKEN)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
api_key = OPENAI_TOKEN

# Create a thread and assistant
thread = None
assistant = None

nest_asyncio.apply()


async def create_thread_and_assistant():
    global thread, assistant
    try:
        assistant = await openai_client.beta.assistants.create(
            name="–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥",
            instructions="–≤—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—Ç–æ—Ä-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å",
            tools=[{"type": "code_interpreter"}],
            model="gpt-4-1106-preview",
        )
        thread = await openai_client.beta.threads.create()
    except Exception as e:
        print(f"Error creating thread and assistant: {e}")


async def is_valid_value(value):
    try:
        response = await openai_client.completions.create(
            model="gpt-3.5-turbo-instruct",
            prompt=f"–î–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{value}'. –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å —è–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —ç—Ç–æ –±—Ä–µ–¥ –∏ –Ω–µ—Å—É—Ä–∞–∑–∏—Ü–∞. –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. 'True' - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª. –ù—É –∏–ª–∏ —Å–ª–æ–≤–æ c—É—â–µ—Å—Ç–≤—É–µ—Ç. 'False' - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –±—Ä–µ–¥, —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–º—ã—Å–ª–∞(–Ω–∞–±–æ—Ä —Å–ª–æ–≤),–æ–¥–Ω–∞ –±—É–∫–≤–∞ –Ω–µ—Å—É—Ä–∞–∑–∏—Ü–∞,–Ω–∞–±–æ—Ä –±—É–∫–≤ –Ω–µ –∏–º–µ—é—â–∏—Ö —Å–º—ã—Å–ª–∞ –∏–ª–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞.–û—Ç–≤–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ!!!"
        )
        res = response.to_dict()
        return res['choices'][0]['text']
    except Exception as e:
        print(f"Error validating value: {e}")


async def process_question(question):
    global thread, assistant
    if not thread or not assistant:
        await create_thread_and_assistant()

    # Create a user message in the thread
    message = await openai_client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=question,
    )

    # Run the thread and poll for completion
    run = await openai_client.beta.threads.runs.create_and_poll(
        thread_id=thread.id,
        assistant_id=assistant.id,
        instructions="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–æ –∏ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º!",
    )

    if run.status == "completed":
        # Get the list of messages in the thread
        messages = await openai_client.beta.threads.messages.list(thread_id=thread.id)

        # Extract and return the assistant's response
        response = messages.data[0].content[0].text.value

        return response

    return None


def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


async def save_value(value, user_id):
    resp = bool(await is_valid_value(value))
    if resp:
        try:
            data_exists = await get_user(user_id)
            if data_exists:
                await update_value(user_id,value)
                return f'{value} —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω–Ω–æ—Å—Ç—å—é.\n–¶–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'
            else:
                await insert_data(user_id, value)
                return f'{value} —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω–Ω–æ—Å—Ç—å—é'
        except Exception as e:
            print(f'some problems: {e}')
    else:
        return f'{value} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω–Ω–æ—Å—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É(–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–¥–Ω—É "/q") ' + str(resp)


# start command
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–Ø –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ üçΩ \n –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏ —è –ø–æ–¥—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å,\n –∫—Å—Ç–∞—Ç–∏,–µ—Å–ª–∏ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n \q - –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ ",
        reply_markup=kb
    )


@dp.message_handler(commands=['admin'])
async def send_all_values(message: types.Message):
    result = await select_values()
    await message.reply(result)


@dp.message_handler(commands=['q'])
async def send_value(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏ —Ç–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å(—Å–≤–∞–π–ø–Ω–∏ –≤–ª–µ–≤–æ —ç—Ç–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å): ')


# handler for photo
@dp.message_handler(content_types=['photo', 'document'])
async def handle_photo_message(message: types.Message):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await message.photo[-1].download(destination_file='photo.jpg')
        image_path = 'photo.jpg'
        base64_image = encode_image(image_path)
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }

        payload = {
            "model": "gpt-4-turbo",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "—Å–∫–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±–∂—É –∏ –∫–∞–ª–æ—Ä–∏–π –≤ –µ–¥–µ –Ω–∞ —Ñ–æ—Ç–æ?"
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
        }

        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
        await message.reply(response.json()['choices'][0]['message']['content'])
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
        print(e)
    finally:
        os.remove(image_path)


# handler for answers
@dp.message_handler()
async def get_answer(message: types.Message):
    if message.reply_to_message and message.reply_to_message.from_user.is_bot:
        response = await save_value(message.text, message.from_user.id)
        await message.answer(response)

    else:
        try:
            response = await process_question(message.text)
            await message.reply(response)
        except Exception as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            print(e)


# handler for voice
@dp.message_handler(content_types=['voice'])
async def handle_voice(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        destination = f'{file_id}.ogg'
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.download_file(file_path, destination)

        audio_file = open(destination, "rb")
        translation = await openai_client.audio.translations.create(
            model="whisper-1",
            file=audio_file
        )
        audio_file.close()
        text_from_audio = translation.text
        response_in_text = await process_question(text_from_audio)
        tts = gTTS(response_in_text, lang='ru')
        audio_f = 'temp_audioanswer.ogg'
        tts.save(audio_f)
        with open(audio_f, 'rb') as f:
            await bot.send_voice(message.from_user.id, f)
            f.close()
            os.remove(destination)
            os.remove(audio_f)
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(e)


async def main():
    await create_table()


if __name__ == '__main__':
    asyncio.run(main())
    executor.start_polling(dp, skip_updates=True)
